pipeline {
    agent any

    tools {
        nodejs 'NodeJS' // Ensure the name matches the NodeJS installation configured in Jenkins
    }

    environment {
        FRONTEND_REPO = 'https://github.com/akmabrouk/jenkins-argocd.git'
        FRONTEND_BRANCH = 'main'
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        DOCKER_IMAGE = "akmabrdockerid/carshowroom:${BUILD_NUMBER}"
        GIT_REPO_NAME = "jenkins-argocd"
        GIT_USER_NAME = "akmabrouk"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: "${env.FRONTEND_REPO}", branch: "${env.FRONTEND_BRANCH}"
            }
        }

        stage('Install Dependencies') {
            steps {
                withEnv(['CI=false']) {
                    sh 'npm install'
                }
            }
        }

        stage('Build Application') {
            steps {
                sh 'npm run build' 
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh """
                    git config user.email "aek.mabrouk@gmail.com"
                    git config user.name '${GIT_USER_NAME}'
                    sed -i 's/replaceImageTag/${BUILD_NUMBER}/g' manifests/deployment.yaml
                    git add manifests/deployment.yaml
                    git commit -m 'Update deployment image to version ${BUILD_NUMBER}'
                    git push https://${GIT_USER_NAME}:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean workspace after build
        }
    }
}
